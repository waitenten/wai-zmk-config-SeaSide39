#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <300>;
};

&lt {
    flavor = "balanced";
    quick-tap-ms = <300>;
};

/ {
    combos {
        compatible = "zmk,combos";

        lgui {
            bindings = <&kp LEFT_GUI>;
            key-positions = <13 14>;
        };

        rgui {
            bindings = <&kp RIGHT_GUI>;
            key-positions = <15 16>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <10 11>;
        };

        caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <20 21>;
        };

        del {
            bindings = <&kp DELETE>;
            key-positions = <5 6>;
        };

        mu1 {
            bindings = <&mkp MB1>;
            key-positions = <16 17>;
        };

        mb2 {
            bindings = <&mkp MB2>;
            key-positions = <17 18>;
        };

        mb3 {
            bindings = <&mkp MB3>;
            key-positions = <7 17>;
        };

        up {
            bindings = <&kp UP_ARROW>;
            key-positions = <6 8>;
        };

        dn {
            bindings = <&kp DOWN>;
            key-positions = <16 18>;
        };

        le {
            bindings = <&kp LEFT_ARROW>;
            key-positions = <6 7>;
        };

        ri {
            bindings = <&kp RIGHT>;
            key-positions = <7 8>;
        };

        zero {
            bindings = <&kp KP_NUMBER_0>;
            key-positions = <26 27>;
        };

        bi {
            bindings = <&kp EXCL>;
            key-positions = <24 7>;
        };

        sy {
            bindings = <&kp HASH>;
            key-positions = <11 5>;
        };

        do {
            bindings = <&kp DOLLAR>;
            key-positions = <12 8>;
        };

        ye {
            bindings = <&kp INTERNATIONAL_3>;
            key-positions = <2 5>;
        };

        pa {
            bindings = <&kp PERCENT>;
            key-positions = <10 9>;
        };

        ad {
            bindings = <&kp LS(N6)>;
            key-positions = <10 12>;
        };

        at {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <10 4>;
        };

        ub {
            bindings = <&kp LS(INTERNATIONAL_1)>;
            key-positions = <24 6>;
        };

        lbrc {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <2 4>;
        };

        rbrc {
            bindings = <&kp BACKSLASH>;
            key-positions = <5 7>;
        };

        lkako {
            bindings = <&kp LS(NUMBER_8)>;
            key-positions = <12 14>;
        };

        rkako {
            bindings = <&kp LS(NUMBER_9)>;
            key-positions = <15 17>;
        };

        lsbr {
            bindings = <&kp LS(RIGHT_BRACKET)>;
            key-positions = <22 24>;
        };

        rsbr {
            bindings = <&kp LS(BACKSLASH)>;
            key-positions = <25 27>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        td_L5_qt: td_L5_qt {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_L5_QT";
            #binding-cells = <0>;
            bindings =
                <&lt 5 LS(N7)>,
                <&kp LS(NUMBER_2)>,
                <&kt RS(LEFT_BRACKET)>;
        };

        td_at_co: td_at_co {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_AT_CO";
            #binding-cells = <0>;
            bindings =
                <&mt LEFT_ALT SINGLE_QUOTE>,
                <&kp SEMI>,
                <&kp LS(INTERNATIONAL_3)>;
        };

        td_ct_nm: td_ct_nm {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_CT_NM";
            #binding-cells = <0>;
            bindings = <&mt LCTRL LS(EQUAL)>, <&kp EQUAL>;
        };

        td_sh_ej: td_sh_ej {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SH_EJ";
            #binding-cells = <0>;
            bindings = <&mt LSHFT LANGUAGE_2>, <&kp LANGUAGE_1>;
        };

        td_pi_co: td_pi_co {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_PI_CO";
            #binding-cells = <0>;
            bindings = <&kp PERIOD>, <&kp COMMA>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q      &kp W      &kp E      &kp R               &kp T                                                  &kp Y             &kp U    &kp I                &kp O       &lt 6 P
&kp A      &kp S      &kp D      &kp F               &kp G                                                  &kp H             &kp J    &kp K                &kp L       &kp MINUS
&kp X      &kp Z      &kp C      &kp V               &kp B                                                  &kp N             &lt 5 M  &mt RIGHT_ALT COMMA  &kp PERIOD  &kp QUESTION
&td_ct_nm  &td_at_co  &td_L5_qt  &lt 2 INT_MUHENKAN  &lt 1 SPACE  &td_sh_ej      &mt RIGHT_SHIFT BACKSPACE  &lt 2 INT_HENKAN                                            &mt RCTRL ENTER
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        SYMBOL {
            bindings = <
&trans  &trans  &trans  &trans  &kp RS(LEFT_BRACKET)                          &kp RA(RIGHT)       &kp PAGE_UP     &kp UP_ARROW    &kp HOME         &kp C_MEDIA_WWW
&trans  &trans  &trans  &trans  &trans                                        &kp RA(LEFT_ARROW)  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp RS(RC(T))
&trans  &trans  &trans  &trans  &trans                                        &kp RC(F4)          &kp PAGE_DOWN   &kp F5          &kp END          &kp DOUBLE_QUOTES
&trans  &trans  &trans  &trans  &trans                &trans      &kp DELETE  &kp INT_MUHENKAN                                                     &kp ENTER
            >;
        };

        NUM {
            bindings = <
&trans   &kp F2   &kp F3  &kp F4  &kp F5                              &kp SLASH             &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp LS(SEMI)
&kp F6   &kp F7   &kp F8  &kp F9  &kp F10                             &kp LS(SINGLE_QUOTE)  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp MINUS
&kp F11  &kp F12  &trans  &trans  &trans                              &kp LS(MINUS)         &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &td_pi_co
&trans   &trans   &trans  &trans  &trans   &trans      &kp BACKSPACE  &kp KP_NUMBER_0                                                          &kp ENTER
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &mkp MB4                &kp UP_ARROW    &mkp MB5                 &trans                       &kp LG(LEFT_ARROW)          &kp LA(LEFT_ARROW)      &kp UP_ARROW    &kp RA(RIGHT_ARROW)      &kp RG(RIGHT_ARROW)
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END                      &kp LC(LS(TAB))             &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp RC(TAB)
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans                       &kp LA(LG(LC(LEFT_ARROW)))  &kp LA(LG(LEFT_ARROW))  &kp LA(LG(F))   &kp RG(RA(RIGHT_ARROW))  &kp RA(RC(RG(RIGHT_ARROW)))
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &kp BACKSPACE                                                                                &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans                      &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans             &trans                                   &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans             &trans                                   &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans             &trans                                   &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp C_VOLUME_DOWN  &kp C_MUTE  &kp C_VOLUME_UP      &trans  &trans                          &trans
            >;
        };

        CONFIG {
            bindings = <
&bt BT_CLR_ALL  &bt BT_CLR    &trans        &trans        &trans                            &trans  &trans  &bootloader  &trans  &trans
&trans          &trans        &trans        &trans        &trans                            &trans  &trans  &trans       &trans  &trans
&bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                      &trans  &trans  &trans       &trans  &trans
&trans          &trans        &trans        &trans        &trans        &trans      &trans  &trans                               &trans
            >;
        };
    };
};
